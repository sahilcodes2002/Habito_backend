generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 Int              @id @default(autoincrement())
  username           String           @unique
  name               String
  password           String
  email              String?
  created_at         DateTime         @default(now())
  private            Boolean
  notifications      Int
  weeklytask         Weektask[]
  Folderofproject    Folderproject[]
  assigned_work      Works[]
  assigned_subwork    SubWorks[]
  todo               Todo[]
  todobin            Todobin[]
  projects           Project[]
  folder             Folder[]
  projectmessages    ProjectMessages[]
  workhistory        Workhistory[]
  projectinvite      ProjectInvite[]
  calenderevents     Calenderevents[]
  codestore          Codestore[]
  sentMessages       Message[]        @relation("sentMessages")
  receivedMessages   Message[]        @relation("receivedMessages")
}

model Codestore {
  id          Int      @id @default(autoincrement())
  user_id     Int
  title       String
  description String?
  code        String
  language    String
  important   Boolean?
  created_at  DateTime @default(now())
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}


model Emailwithcode{
  id           Int      @id @default(autoincrement())
  email        String   @unique
  code         String
}

model Calenderevents {
  id          Int      @id @default(autoincrement())
  user_id     Int      
  title       String
  description String?
  start       DateTime
  end         DateTime
  color       String   
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}



model Weektask {
  id    Int      @id @default(autoincrement())
  date  DateTime @db.Date
  task  String
  user_id Int
  completed Boolean
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}




model Workhistory {
  id           Int      @id @default(autoincrement())
  name         String
  user_id      Int
  hoursWorked  Int
  minsWorked   Int
  startHour    Int
  startMinute  Int
  endHour      Int
  endMinute    Int
  dateCreated  DateTime @default(now())
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Quotes {
  id          Int      @id @default(autoincrement())
  quote       String
}

model Todo {
  id          Int      @id @default(autoincrement())
  user_id     Int
  title       String
  description String
  completed   Boolean
  created_at  DateTime @default(now())
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Todobin {
  id          Int      @id @default(autoincrement())
  user_id     Int
  title       String
  description String
  completed   Boolean
  created_at  DateTime @default(now())
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Folder {
  id          Int      @id @default(autoincrement())
  user_id     Int
  title       String
  color       Int
  archive     Boolean
  created_at  DateTime @default(now())
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  notes       Project[]

  @@index([user_id])
}

model Project {
  id              Int              @id @default(autoincrement())
  user_id         Int
  folder_id       Int
  folderproject_id  Int?
  title           String
  description     String?
  link            String?
  important       Boolean?
  hashtag         WorkTags[]
  works           Works[]
  projectmessages ProjectMessages[]
  subworks        SubWorks[]
  projectinvite   ProjectInvite[]
  workmails       Mailworks[]
  subworkmails    Mailsubworks[]
  archive         Boolean
  done            Boolean
  created_at      DateTime @default(now())

  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  folder          Folder   @relation(fields: [folder_id], references: [id], onDelete: Cascade)
  folderproject   Folderproject? @relation(fields: [folderproject_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([folder_id])
  @@index([folderproject_id])
}

model Folderproject {
  id         Int              @id @default(autoincrement())
  name       String
  user_id    Int
  important  Boolean
  color      String
  created_at DateTime          @default(now())
  tags       String
  parentId   Int?
  projects   Project[]
  user       User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  parent     Folderproject?    @relation(fields: [parentId], references: [id], name: "ParentFolder")
  children   Folderproject[]   @relation("ParentFolder")
}



model ProjectInvite{
  id              Int              @id @default(autoincrement())
  project_id      Int
  user_id         Int
  accepted        Boolean
  important       Boolean?
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  folder          Project   @relation(fields: [project_id], references: [id], onDelete: Cascade)
}

model ProjectMessages {
  id           Int      @id @default(autoincrement())
  sender_id    Int
  project_id   Int
  content      String
  important    Boolean
  created_at   DateTime @default(now())
  sender       User     @relation(fields: [sender_id], references: [id], onDelete: Cascade)
  project      Project  @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@index([sender_id])
  @@index([project_id])
}

model WorkTags {
  id          Int      @id @default(autoincrement())
  project_id  Int
  tag         String
  project     Project  @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@index([project_id])
}

model Works {
  id          Int        @id @default(autoincrement())
  project_id  Int
  work        String
  description String
  assignto    Int
  completed   Boolean
  subworks    SubWorks[]
  mails       Mailworks[]
  created_at  DateTime   @default(now())
  project     Project    @relation(fields: [project_id], references: [id], onDelete: Cascade)
  assign      User       @relation(fields: [assignto], references: [id], onDelete: Cascade)

  @@index([project_id])
  @@index([assignto])
}

model SubWorks {
  id        Int    @id @default(autoincrement())
  work_id   Int
  project_id Int
  subwork   String
  assignto Int
  completed Boolean
  mails     Mailsubworks[]
  subdescription String
  work      Works  @relation(fields: [work_id], references: [id], onDelete: Cascade)
  project      Project  @relation(fields: [project_id], references: [id], onDelete: Cascade)
  assigned    User       @relation(fields: [assignto], references: [id], onDelete: Cascade)
  @@index([work_id])
}

model Mailworks{
  id        Int    @id @default(autoincrement())
  work_id   Int   @unique
  title     String
  description String?
  email       String
  project_id  Int 
  project      Project  @relation(fields: [project_id], references: [id], onDelete: Cascade)
  work      Works  @relation(fields: [work_id], references: [id], onDelete: Cascade)
}
model Mailsubworks{
  id        Int    @id @default(autoincrement())
  subwork_id Int   @unique
  title     String
  description String?
  email       String
  project_id  Int 
  project      Project  @relation(fields: [project_id], references: [id], onDelete: Cascade)
  subwork      SubWorks  @relation(fields: [subwork_id], references: [id], onDelete: Cascade)
}

model Message {
  id            Int      @id @default(autoincrement())
  sender_id     Int
  receiver_id   Int
  content       String
  important     Boolean
  created_at    DateTime @default(now())
  sender        User     @relation("sentMessages", fields: [sender_id], references: [id], onDelete: Cascade)
  receiver      User     @relation("receivedMessages", fields: [receiver_id], references: [id], onDelete: Cascade)

  @@index([sender_id])
  @@index([receiver_id])
}
